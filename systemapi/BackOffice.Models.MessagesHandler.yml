### YamlMime:ManagedReference
items:
- uid: BackOffice.Models.MessagesHandler
  commentId: T:BackOffice.Models.MessagesHandler
  id: MessagesHandler
  parent: BackOffice.Models
  children:
  - BackOffice.Models.MessagesHandler.#ctor(BackOffice.Models.Sessions)
  - BackOffice.Models.MessagesHandler.Add(System.String,System.String)
  - BackOffice.Models.MessagesHandler.Messages
  - BackOffice.Models.MessagesHandler.RemoveAll
  langs:
  - csharp
  - vb
  name: MessagesHandler
  nameWithType: MessagesHandler
  fullName: BackOffice.Models.MessagesHandler
  type: Class
  source:
    id: MessagesHandler
    path: C:\Users\rober\Documents\GitHub\ticketSystem-rmbl\src\BackOffice\Models\MessagesHandler.cs
    startLine: 8
  assemblies:
  - BackOffice
  namespace: BackOffice.Models
  syntax:
    content: public class MessagesHandler
    content.vb: Public Class MessagesHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BackOffice.Models.MessagesHandler.Messages
  commentId: P:BackOffice.Models.MessagesHandler.Messages
  id: Messages
  parent: BackOffice.Models.MessagesHandler
  langs:
  - csharp
  - vb
  name: Messages
  nameWithType: MessagesHandler.Messages
  fullName: BackOffice.Models.MessagesHandler.Messages
  type: Property
  source:
    id: Messages
    path: C:\Users\rober\Documents\GitHub\ticketSystem-rmbl\src\BackOffice\Models\MessagesHandler.cs
    startLine: 10
  assemblies:
  - BackOffice
  namespace: BackOffice.Models
  syntax:
    content: public Dictionary<string, List<string>> Messages { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
    content.vb: Public ReadOnly Property Messages As Dictionary(Of String, List(Of String))
  overload: BackOffice.Models.MessagesHandler.Messages*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BackOffice.Models.MessagesHandler.#ctor(BackOffice.Models.Sessions)
  commentId: M:BackOffice.Models.MessagesHandler.#ctor(BackOffice.Models.Sessions)
  id: '#ctor(BackOffice.Models.Sessions)'
  parent: BackOffice.Models.MessagesHandler
  langs:
  - csharp
  - vb
  name: MessagesHandler(Sessions)
  nameWithType: MessagesHandler.MessagesHandler(Sessions)
  fullName: BackOffice.Models.MessagesHandler.MessagesHandler(BackOffice.Models.Sessions)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\rober\Documents\GitHub\ticketSystem-rmbl\src\BackOffice\Models\MessagesHandler.cs
    startLine: 17
  assemblies:
  - BackOffice
  namespace: BackOffice.Models
  summary: "\nConstructor with TempData\n"
  example: []
  syntax:
    content: public MessagesHandler(Sessions newSessions)
    parameters:
    - id: newSessions
      type: BackOffice.Models.Sessions
    content.vb: Public Sub New(newSessions As Sessions)
  overload: BackOffice.Models.MessagesHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BackOffice.Models.MessagesHandler.Add(System.String,System.String)
  commentId: M:BackOffice.Models.MessagesHandler.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: BackOffice.Models.MessagesHandler
  langs:
  - csharp
  - vb
  name: Add(String, String)
  nameWithType: MessagesHandler.Add(String, String)
  fullName: BackOffice.Models.MessagesHandler.Add(System.String, System.String)
  type: Method
  source:
    id: Add
    path: C:\Users\rober\Documents\GitHub\ticketSystem-rmbl\src\BackOffice\Models\MessagesHandler.cs
    startLine: 37
  assemblies:
  - BackOffice
  namespace: BackOffice.Models
  summary: "\nAdd a message to TempData\n"
  example: []
  syntax:
    content: public void Add(string messageType, string message)
    parameters:
    - id: messageType
      type: System.String
      description: Message type (bootstrap css-classes)
    - id: message
      type: System.String
      description: Message to print
    content.vb: Public Sub Add(messageType As String, message As String)
  overload: BackOffice.Models.MessagesHandler.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BackOffice.Models.MessagesHandler.RemoveAll
  commentId: M:BackOffice.Models.MessagesHandler.RemoveAll
  id: RemoveAll
  parent: BackOffice.Models.MessagesHandler
  langs:
  - csharp
  - vb
  name: RemoveAll()
  nameWithType: MessagesHandler.RemoveAll()
  fullName: BackOffice.Models.MessagesHandler.RemoveAll()
  type: Method
  source:
    id: RemoveAll
    path: C:\Users\rober\Documents\GitHub\ticketSystem-rmbl\src\BackOffice\Models\MessagesHandler.cs
    startLine: 50
  assemblies:
  - BackOffice
  namespace: BackOffice.Models
  summary: "\nRemove all messages\n"
  example: []
  syntax:
    content: public void RemoveAll()
    content.vb: Public Sub RemoveAll
  overload: BackOffice.Models.MessagesHandler.RemoveAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: BackOffice.Models
  commentId: N:BackOffice.Models
  isExternal: false
  name: BackOffice.Models
  nameWithType: BackOffice.Models
  fullName: BackOffice.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: BackOffice.Models.MessagesHandler.Messages*
  commentId: Overload:BackOffice.Models.MessagesHandler.Messages
  isExternal: false
  name: Messages
  nameWithType: MessagesHandler.Messages
  fullName: BackOffice.Models.MessagesHandler.Messages
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, List<String>>
  nameWithType: Dictionary<String, List<String>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<System.String>>
  nameWithType.vb: Dictionary(Of String, List(Of String))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List(Of System.String))
  name.vb: Dictionary(Of String, List(Of String))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BackOffice.Models.MessagesHandler.#ctor*
  commentId: Overload:BackOffice.Models.MessagesHandler.#ctor
  isExternal: false
  name: MessagesHandler
  nameWithType: MessagesHandler.MessagesHandler
  fullName: BackOffice.Models.MessagesHandler.MessagesHandler
- uid: BackOffice.Models.Sessions
  commentId: T:BackOffice.Models.Sessions
  parent: BackOffice.Models
  isExternal: false
  name: Sessions
  nameWithType: Sessions
  fullName: BackOffice.Models.Sessions
- uid: BackOffice.Models.MessagesHandler.Add*
  commentId: Overload:BackOffice.Models.MessagesHandler.Add
  isExternal: false
  name: Add
  nameWithType: MessagesHandler.Add
  fullName: BackOffice.Models.MessagesHandler.Add
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BackOffice.Models.MessagesHandler.RemoveAll*
  commentId: Overload:BackOffice.Models.MessagesHandler.RemoveAll
  isExternal: false
  name: RemoveAll
  nameWithType: MessagesHandler.RemoveAll
  fullName: BackOffice.Models.MessagesHandler.RemoveAll
